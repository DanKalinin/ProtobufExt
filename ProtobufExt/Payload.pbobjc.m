// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payload.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/Any.pbobjc.h>
#else
 #import "google/protobuf/Any.pbobjc.h"
#endif

 #import "Payload.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3PayloadRoot

@implementation PB3PayloadRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PB3PayloadRoot_FileDescriptor

static GPBFileDescriptor *PB3PayloadRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"PB3"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - PB3Payload

@implementation PB3Payload

@dynamic type;
@dynamic serial;
@dynamic responseSerial;
@dynamic error;
@dynamic hasMessage, message;

typedef struct PB3Payload__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  NSString *error;
  GPBAny *message;
  int64_t serial;
  int64_t responseSerial;
} PB3Payload__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3Payload_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Payload__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "serial",
        .dataTypeSpecific.className = NULL,
        .number = PB3Payload_FieldNumber_Serial,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Payload__storage_, serial),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "responseSerial",
        .dataTypeSpecific.className = NULL,
        .number = PB3Payload_FieldNumber_ResponseSerial,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Payload__storage_, responseSerial),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "error",
        .dataTypeSpecific.className = NULL,
        .number = PB3Payload_FieldNumber_Error,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3Payload__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = PB3Payload_FieldNumber_Message,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3Payload__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Payload class]
                                     rootClass:[PB3PayloadRoot class]
                                          file:PB3PayloadRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Payload__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
