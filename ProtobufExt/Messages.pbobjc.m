// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Messages.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GPBEMessagesRoot

@implementation GPBEMessagesRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - GPBEMessagesRoot_FileDescriptor

static GPBFileDescriptor *GPBEMessagesRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"GPBE"
                                                 objcPrefix:@"GPBE"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GPBELoad

@implementation GPBELoad

@dynamic operation;
@dynamic command;
@dynamic handle;
@dynamic path;
@dynamic chunk;
@dynamic digest;
@dynamic hasRet, ret;

typedef struct GPBELoad__storage_ {
  uint32_t _has_storage_[1];
  GPBELoad_Operation operation;
  GPBELoad_Command command;
  int32_t handle;
  NSString *path;
  NSData *chunk;
  NSData *digest;
  GPBELoad *ret;
} GPBELoad__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "operation",
        .dataTypeSpecific.enumDescFunc = GPBELoad_Operation_EnumDescriptor,
        .number = GPBELoad_FieldNumber_Operation,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GPBELoad__storage_, operation),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "command",
        .dataTypeSpecific.enumDescFunc = GPBELoad_Command_EnumDescriptor,
        .number = GPBELoad_FieldNumber_Command,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GPBELoad__storage_, command),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "handle",
        .dataTypeSpecific.className = NULL,
        .number = GPBELoad_FieldNumber_Handle,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GPBELoad__storage_, handle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "path",
        .dataTypeSpecific.className = NULL,
        .number = GPBELoad_FieldNumber_Path,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GPBELoad__storage_, path),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chunk",
        .dataTypeSpecific.className = NULL,
        .number = GPBELoad_FieldNumber_Chunk,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GPBELoad__storage_, chunk),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "digest",
        .dataTypeSpecific.className = NULL,
        .number = GPBELoad_FieldNumber_Digest,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GPBELoad__storage_, digest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "ret",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBELoad),
        .number = GPBELoad_FieldNumber_Ret,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GPBELoad__storage_, ret),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GPBELoad class]
                                     rootClass:[GPBEMessagesRoot class]
                                          file:GPBEMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GPBELoad__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GPBELoad_Operation_RawValue(GPBELoad *message) {
  GPBDescriptor *descriptor = [GPBELoad descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GPBELoad_FieldNumber_Operation];
  return GPBGetMessageInt32Field(message, field);
}

void SetGPBELoad_Operation_RawValue(GPBELoad *message, int32_t value) {
  GPBDescriptor *descriptor = [GPBELoad descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GPBELoad_FieldNumber_Operation];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t GPBELoad_Command_RawValue(GPBELoad *message) {
  GPBDescriptor *descriptor = [GPBELoad descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GPBELoad_FieldNumber_Command];
  return GPBGetMessageInt32Field(message, field);
}

void SetGPBELoad_Command_RawValue(GPBELoad *message, int32_t value) {
  GPBDescriptor *descriptor = [GPBELoad descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GPBELoad_FieldNumber_Command];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum GPBELoad_Operation

GPBEnumDescriptor *GPBELoad_Operation_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "OperationNone\000OperationUp\000OperationDown\000";
    static const int32_t values[] = {
        GPBELoad_Operation_OperationNone,
        GPBELoad_Operation_OperationUp,
        GPBELoad_Operation_OperationDown,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GPBELoad_Operation)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GPBELoad_Operation_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GPBELoad_Operation_IsValidValue(int32_t value__) {
  switch (value__) {
    case GPBELoad_Operation_OperationNone:
    case GPBELoad_Operation_OperationUp:
    case GPBELoad_Operation_OperationDown:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum GPBELoad_Command

GPBEnumDescriptor *GPBELoad_Command_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "CommandNone\000CommandBegin\000CommandProcess\000"
        "CommandEnd\000CommandCancel\000";
    static const int32_t values[] = {
        GPBELoad_Command_CommandNone,
        GPBELoad_Command_CommandBegin,
        GPBELoad_Command_CommandProcess,
        GPBELoad_Command_CommandEnd,
        GPBELoad_Command_CommandCancel,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GPBELoad_Command)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GPBELoad_Command_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GPBELoad_Command_IsValidValue(int32_t value__) {
  switch (value__) {
    case GPBELoad_Command_CommandNone:
    case GPBELoad_Command_CommandBegin:
    case GPBELoad_Command_CommandProcess:
    case GPBELoad_Command_CommandEnd:
    case GPBELoad_Command_CommandCancel:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GPBEDivide

@implementation GPBEDivide

@dynamic a;
@dynamic b;
@dynamic ret;

typedef struct GPBEDivide__storage_ {
  uint32_t _has_storage_[1];
  int32_t a;
  int32_t b;
  double ret;
} GPBEDivide__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "a",
        .dataTypeSpecific.className = NULL,
        .number = GPBEDivide_FieldNumber_A,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GPBEDivide__storage_, a),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "b",
        .dataTypeSpecific.className = NULL,
        .number = GPBEDivide_FieldNumber_B,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GPBEDivide__storage_, b),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "ret",
        .dataTypeSpecific.className = NULL,
        .number = GPBEDivide_FieldNumber_Ret,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GPBEDivide__storage_, ret),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GPBEDivide class]
                                     rootClass:[GPBEMessagesRoot class]
                                          file:GPBEMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GPBEDivide__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GPBEPerson

@implementation GPBEPerson

@dynamic name;
@dynamic age;
@dynamic childrenArray, childrenArray_Count;

typedef struct GPBEPerson__storage_ {
  uint32_t _has_storage_[1];
  uint32_t age;
  NSString *name;
  NSMutableArray *childrenArray;
} GPBEPerson__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = GPBEPerson_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GPBEPerson__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "age",
        .dataTypeSpecific.className = NULL,
        .number = GPBEPerson_FieldNumber_Age,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GPBEPerson__storage_, age),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "childrenArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBEPerson),
        .number = GPBEPerson_FieldNumber_ChildrenArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GPBEPerson__storage_, childrenArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GPBEPerson class]
                                     rootClass:[GPBEMessagesRoot class]
                                          file:GPBEMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GPBEPerson__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GPBEGetParent

@implementation GPBEGetParent

@dynamic hasPerson, person;
@dynamic hasRet, ret;

typedef struct GPBEGetParent__storage_ {
  uint32_t _has_storage_[1];
  GPBEPerson *person;
  GPBEPerson *ret;
} GPBEGetParent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "person",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBEPerson),
        .number = GPBEGetParent_FieldNumber_Person,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GPBEGetParent__storage_, person),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ret",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBEPerson),
        .number = GPBEGetParent_FieldNumber_Ret,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GPBEGetParent__storage_, ret),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GPBEGetParent class]
                                     rootClass:[GPBEMessagesRoot class]
                                          file:GPBEMessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GPBEGetParent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
